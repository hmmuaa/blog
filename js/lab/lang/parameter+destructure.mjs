import'#lang+'
let f,g,h
f=([a=11,b=22]=[])=>a+b
eq(f(),33)
eq(f([33]),55)

f=({a,b})=>a+b,eq(f({a:1,b:2}),3)
g=([a,b])=>a+b,eq(g([1,2]),3)
throws(f,TypeError),throws(g,TypeError)
///函数内用到就必须传参 就和正常参数一样

f=({a=1,b=2})=>a+b,eq(f({}),3)
g=([a=1,b=2])=>a+b,eq(g([]),3)///默认值有效 但
throws(f,TypeError),throws(g,TypeError)
///如果不传参会是undefined
eq(f({a:3}),5),eq(f({b:3}),4),eq(f({a:3,b:4}),7)
eq(g([3]),5),eq(g([,3]),4),eq(g([3,4]),7)

f=(a={b:1,c:2})=>a.b+a.c,eq(f(),3)
f=({a={b:1,c:2}}={})=>a.b+a.c,eq(f(),3)

f=({a=1,b=2}={})=>a+b///额外设默认值
eq(f(),3)///这样可以不传参
eq(f({a:3}),5),eq(f({b:3}),4),eq(f({a:3,b:4}),7)

f=({a,b}={a:1,b:2})=>a+b
eq(f(),3)
eq(f({a:3}),NaN)///不能只设一个 传参会以整体覆盖额外默认
eq(f({a:3,b:4}),7)///成功

f=({a=1,b=2}={a:3,b:4})=>a+b
eq(f(),7)
eq(f({a:5}),7)///不能只设一个
eq(f({a:5,b:6}),11)///成功

f=({a=11,b=22}={a:33})=>a+b
eq(f(),55)
eq(f({a:44}),66)///覆盖默认
eq(f({b:44}),55)///虽然只设置b 但使默认a2失效
eq(f({a:44,b:55}),99)

f=(...[a=11,b=22])=>a+b///做个写法不报错但等同无效
eq(f(),33)
eq(f(33),55)
eq(f(33,44),77)